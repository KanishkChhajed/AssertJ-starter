package com.darwinit.learning.assertj;

import org.assertj.core.api.AbstractAssert;

/**
 * {@link Dummy} specific assertions - Generated by CustomAssertionGenerator.
 */
public class DummyAssert extends AbstractAssert<DummyAssert, Dummy> {

  /**
   * Creates a new <code>{@link DummyAssert}</code> to make assertions on actual Dummy.
   * @param actual the Dummy we want to make assertions on.
   */
  public DummyAssert(Dummy actual) {
    super(actual, DummyAssert.class);
  }

  /**
   * An entry point for DummyAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myDummy)</code> and get specific assertion with code completion.
   * @param actual the Dummy we want to make assertions on.
   * @return a new <code>{@link DummyAssert}</code>
   */
  public static DummyAssert assertThat(Dummy actual) {
    return new DummyAssert(actual);
  }

  /**
   * Verifies that the actual Dummy's value is equal to the given one.
   * @param value the given value to compare the actual Dummy's value to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Dummy's value is not equal to the given one.
   */
  public DummyAssert hasValue(int value) {
    // check that actual Dummy we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting value of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    int actualValue = actual.getValue();
    if (actualValue != value) {
      failWithMessage(assertjErrorMessage, actual, value, actualValue);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Dummy's value2 is equal to the given one.
   * @param value2 the given value2 to compare the actual Dummy's value2 to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Dummy's value2 is not equal to the given one.
   */
  public DummyAssert hasValue2(int value2) {
    // check that actual Dummy we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting value2 of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    int actualValue2 = actual.getValue2();
    if (actualValue2 != value2) {
      failWithMessage(assertjErrorMessage, actual, value2, actualValue2);
    }

    // return the current assertion for method chaining
    return this;
  }

}
